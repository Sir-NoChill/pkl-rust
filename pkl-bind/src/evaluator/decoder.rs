use rmp_serde::decode;
use serde::Deserialize;

pub trait Pkl {
    fn unmarshal(data: Vec<u8>) -> Result<Self, &'static str> where Self: Sized;
}

#[cfg(test)]
mod tests {
    use pkl_derive::Pkl;
    use rmp_serde::decode;

    use super::*;

    #[test]
    fn test_simple_decode() {
        #[derive(Debug)]
        struct Test {
            foo: i64,
            bar: i32,
        }

        let data = vec![0x94, 0x01, 0xA4, 0x54, 0x65, 0x73, 0x74, 0xD9, 0x44, 0x66, 0x69, 0x6C, 0x65,
                        0x3A, 0x2F, 0x2F, 0x2F, 0x68, 0x6F, 0x6D, 0x65, 0x2F, 0x73, 0x74, 0x6F, 0x72,
                        0x6D, 0x62, 0x6C, 0x65, 0x73, 0x73, 0x65, 0x64, 0x2F, 0x43, 0x6F, 0x64, 0x65,
                        0x2F, 0x70, 0x6B, 0x6C, 0x2D, 0x72, 0x75, 0x73, 0x74, 0x2F, 0x73, 0x72, 0x63,
                        0x2F, 0x65, 0x76, 0x61, 0x6C, 0x75, 0x61, 0x74, 0x6F, 0x72, 0x2F, 0x74, 0x65,
                        0x73, 0x74, 0x73, 0x2F, 0x74, 0x65, 0x73, 0x74, 0x2E, 0x70, 0x6B, 0x6C, 0x92,
                        0x93, 0x10, 0xA3, 0x66, 0x6F, 0x6F, 0x01, 0x93, 0x10, 0xA3, 0x62, 0x61, 0x72,
                        0x02];

        let decoded: (i64, String, String, ((i64, String, i64), (i64, String, i32)))
            = decode::from_slice(&data).expect("Failed to decode");

        let test = Test {
            foo: decoded.3.0.2,
            bar: decoded.3.1.2,
        };
        println!("Decoded: {:?}", decoded);
        println!("Unmarshalled: {:?}", test);
    }

    #[derive(Debug, Pkl)]
    struct Test {
        foo: i64,
        bar: i32,
    }

    #[test]
    fn test_simple_decode_type() {

        let data = vec![0x94, 0x01, 0xA4, 0x54, 0x65, 0x73, 0x74, 0xD9, 0x44, 0x66, 0x69, 0x6C, 0x65,
                        0x3A, 0x2F, 0x2F, 0x2F, 0x68, 0x6F, 0x6D, 0x65, 0x2F, 0x73, 0x74, 0x6F, 0x72,
                        0x6D, 0x62, 0x6C, 0x65, 0x73, 0x73, 0x65, 0x64, 0x2F, 0x43, 0x6F, 0x64, 0x65,
                        0x2F, 0x70, 0x6B, 0x6C, 0x2D, 0x72, 0x75, 0x73, 0x74, 0x2F, 0x73, 0x72, 0x63,
                        0x2F, 0x65, 0x76, 0x61, 0x6C, 0x75, 0x61, 0x74, 0x6F, 0x72, 0x2F, 0x74, 0x65,
                        0x73, 0x74, 0x73, 0x2F, 0x74, 0x65, 0x73, 0x74, 0x2E, 0x70, 0x6B, 0x6C, 0x92,
                        0x93, 0x10, 0xA3, 0x66, 0x6F, 0x6F, 0x01, 0x93, 0x10, 0xA3, 0x62, 0x61, 0x72,
                        0x02];

        let t = Test::unmarshal(data);

        println!("Unmarshalled: {:?}", t);
    }


}
